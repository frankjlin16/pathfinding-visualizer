{"version":3,"sources":["logo.svg","pathfinder/node.jsx","pathfinder/pathfinder.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","row","column","isStart","isFinish","isWall","onMouseDown","onMouseUp","onMouseEnter","type","id","className","Component","Pathfinder","state","grid","mouseIsPressed","createGrid","setState","newGrid","getNewGridWithWallToggled","map","rowIndex","node","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","push","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d541b165.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\n\nimport \"./node.css\";\n\nclass Node extends Component {\n\trender() {\n\t\tconst { row, column, isStart, isFinish, isWall, onMouseDown, onMouseUp, onMouseEnter } = this.props;\n\t\tconst type = isStart ? \" node-start\" : isFinish ? \" node-finish\" : isWall ? \" node-wall\" : \"\";\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={`node-${row}-${column}`}\n\t\t\t\tclassName={`node${type}`}\n\t\t\t\tonMouseDown={() => onMouseDown(row, column)}\n\t\t\t\tonMouseEnter={() => onMouseEnter(row, column)}\n\t\t\t\tonMouseUp={() => onMouseUp()}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Node;\n","import React, { Component } from \"react\";\nimport Node from \"./node\";\nimport { dijkstra } from \"../algorithms/dijkstra\";\n\nimport \"./pathfinder.css\";\n\nconst START_NODE_ROW = 25;\nconst START_NODE_COLUMN = 10;\nconst FINISH_NODE_ROW = 25;\nconst FINISH_NODE_COLUMN = 40;\n\nclass Pathfinder extends Component {\n\t// state = {\n\t// \tgrid: [],\n\t// \tmouseIsPressed: false,\n\t// };\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tgrid: [],\n\t\t\tmouseIsPressed: false,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst grid = createGrid();\n\t\tthis.setState({ grid });\n\t}\n\n\thandleMouseDown(row, column) {\n\t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, column);\n\t\tthis.setState({ grid: newGrid, mouseIsPressed: true });\n\t}\n\n\thandleMouseEnter(row, column) {\n\t\tif (this.state.mouseIsPressed) {\n\t\t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, column);\n\t\t\tthis.setState({ grid: newGrid });\n\t\t}\n\t}\n\n\thandleMouseUp() {\n\t\tthis.setState({ mouseIsPressed: false });\n\t}\n\n\trender() {\n\t\tconst { grid, mouseIsPressed } = this.state;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{/* <button onClick={() => this.visualizeDijkstra()}>Visualize Dijkstra's Algorithm</button> */}\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t{grid.map((row, rowIndex) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={rowIndex}>\n\t\t\t\t\t\t\t\t{row.map((node, nodeIndex) => {\n\t\t\t\t\t\t\t\t\tconst { row, column, isStart, isFinish, isWall } = node;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\t\t\tkey={nodeIndex}\n\t\t\t\t\t\t\t\t\t\t\trow={row}\n\t\t\t\t\t\t\t\t\t\t\tcolumn={column}\n\t\t\t\t\t\t\t\t\t\t\tisStart={isStart}\n\t\t\t\t\t\t\t\t\t\t\tisFinish={isFinish}\n\t\t\t\t\t\t\t\t\t\t\tisWall={isWall}\n\t\t\t\t\t\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(row, column) => this.handleMouseDown(row, column)}\n\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(row, column) => this.handleMouseEnter(row, column)}\n\t\t\t\t\t\t\t\t\t\t\tonMouseUp={() => this.handleMouseUp()}\n\t\t\t\t\t\t\t\t\t\t></Node>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nconst createGrid = () => {\n\tconst grid = [];\n\tfor (let row = 0; row < 40; ++row) {\n\t\tconst currentRow = [];\n\t\tfor (let column = 0; column < 50; ++column) {\n\t\t\tcurrentRow.push(createNode(row, column));\n\t\t}\n\t\tgrid.push(currentRow);\n\t}\n\treturn grid;\n};\n\nconst createNode = (row, column) => {\n\treturn {\n\t\trow,\n\t\tcolumn,\n\t\tisStart: row === START_NODE_ROW && column === START_NODE_COLUMN,\n\t\tisFinish: row === FINISH_NODE_ROW && column === FINISH_NODE_COLUMN,\n\t\tisWall: false,\n\t};\n};\n\nconst getNewGridWithWallToggled = (grid, row, column) => {\n\tconst newGrid = grid.slice();\n\tconst node = newGrid[row][column];\n\tconst newNode = {\n\t\t...node,\n\t\tisWall: !node.isWall,\n\t};\n\tnewGrid[row][column] = newNode;\n\treturn newGrid;\n};\n\nexport default Pathfinder;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Pathfinder from \"./pathfinder/pathfinder\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Pathfinder />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}